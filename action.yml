name: Insert Variables
description: Inserts Variables
branding:
  icon: file-text
  color: blue
inputs:
  target:
    description: Target file or directory
    required: true
  contexts:
    description: Contexts in JSON format
    required: true
runs:
  using: composite
  steps:        

    - shell: bash
      env:
        TARGET: ${{ inputs.target }}
        CONTEXTS: ${{ inputs.contexts }}
      run: |
        create_insert_expression() {
          local cmds='[]'
          local context name values value_count keys key value_escaped cmd
          local context_count=$(echo "$CONTEXTS" | jq length)
          for (( i=0; i<$context_count; i++ )); do
            context=$(echo "$CONTEXTS" | jq --argjson i $i '.[$i]')
            name=$(echo "$context" | jq -r '.name')
            values=$(echo "$context" | jq '.values')
            value_count=$(echo "$values" | jq length)
            keys=$(echo "$values" | jq keys)
            for (( j=0; j<$value_count; j++ )); do
              key=$(echo "$keys" | jq -r --argjson j $j '.[$j]')
              # See https://stackoverflow.com/a/29613573
              IFS= read -d '' -r < <(
                echo "$values" \
                | jq -r --arg key "$key" '.[$key]' \
                | sed -e ':a' -e '$!{N;ba' -e '}' -e 's/[&/\]/\\&/g; s/\n/\\&/g'
              )
              value_escaped=${REPLY%$'\n'}
              cmd="s/{{\s*$name.$key\s*}}/$value_escaped/g"
              cmds=$(echo "$cmds" | jq --arg cmd "$cmd" '. += [$cmd]')
            done
          done
          echo "$cmds" | jq -r 'join("; ")'
        }

        insert_variables () {
          if [[ -d "$1" ]]; then
            for item in "$1"/* "$1"/.[!.]* "$1"/..?*; do
              case $item in
                "$1/*"|"$1/.[!.]*"|"$1/..?*") 
                  ;; # skip
                *) 
                  insert_variables "$item"
                  ;;
              esac
            done
          else
            sed -i "$insert_expression" "$1"
          fi
          local name=$(basename "$1")
          local substitute_name=$(echo "$name" | sed "$insert_expression")
          if [[ "$substitute_name" != "$name" ]]; then
            mv "$1" "$(dirname "$1")/$substitute_name"
          fi
        }
        
        insert_expression=$(create_insert_expression)
        insert_variables "$TARGET"
