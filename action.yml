name: Insert Variables
description: Inserts Variables
branding:
  icon: file-text
  color: blue
inputs:
  target:
    description: Target file or directory
    required: true
  context:
    description: Context
    required: true
  values:
    description: Values in JSON format
    required: true
runs:
  using: composite
  steps:        

    - shell: bash
      env:
        TARGET: ${{ inputs.target }}
        CONTEXT: ${{ inputs.context }}
        VALUES: ${{ inputs.values }}
      run: |
        create_insert_expression() {
          local keys=$(echo "$VALUES" | jq keys)
          local key_count=$(echo "$keys" | length)
          local cmds='[]'
          local key value_escaped cmd
          for (( i=0; i<$key_count; i++ )); do
            key=$(echo "$keys" | jq -r --argjson i $i '.[$i]')
            # See https://stackoverflow.com/a/29613573
            IFS= read -d '' -r < <(
              echo "$VALUES" \
              | jq -r --arg key "$key" '.[$key]' \
              | sed -e ':a' -e '$!{N;ba' -e '}' -e 's/[&/\]/\\&/g; s/\n/\\&/g'
            )
            value_escaped=${REPLY%$'\n'}
            cmd="s/{{\s*$CONTEXT.$key\s*}}/$value_escaped/g"
            cmds=$(echo "$cmds" | jq --arg cmd "$cmd" '. += [$cmd]')
          done
          echo "$cmds" | jq -r 'join("; ")'
        }

        insert_variables () {
          if [[ -d "$1" ]]; then
            local items=$(ls -A1 "$1" | jq -Rs 'split("\n")[:-1]')
            local item_count=$(echo "$items" | jq length)
            if [[ $item_count > 0 ]]; then
              for (( i=0; i<$item_count; i++ )); do
                insert_variables "$1/$(echo "$items" | jq -r --argjson i $i '.[$i]')"
              done
            fi
          else
            sed -i "$insert_expression" "$1"
          fi
          local name=$(basename "$1")
          local substitute_name=$(echo "$name" | sed "$insert_expression")
          if [[ "$substitute_name" != "$name" ]]; then
            mv "$1" "$(dirname "$1")/$substitute_name"
          fi
        }
        
        insert_expression=$(create_insert_expression)
        insert_variables "$TARGET"
